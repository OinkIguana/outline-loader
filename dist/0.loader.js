exports.ids = [0];
exports.modules = {

/***/ "./node_modules/@oinkiguana/outline/outline.js":
/*!*****************************************************!*\
  !*** ./node_modules/@oinkiguana/outline/outline.js ***!
  \*****************************************************/
/*! exports provided: MdParser, HtmlParser, BirdParser, TexParser, __wbindgen_string_new, __wbindgen_rethrow, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(TextEncoder, TextDecoder) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdParser\", function() { return MdParser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HtmlParser\", function() { return HtmlParser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BirdParser\", function() { return BirdParser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TexParser\", function() { return TexParser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_string_new\", function() { return __wbindgen_string_new; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_rethrow\", function() { return __wbindgen_rethrow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _outline_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./outline_bg */ \"./node_modules/@oinkiguana/outline/outline_bg.wasm\");\n/* tslint:disable */\n\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passStringToWasm(arg) {\n\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](buf.length);\n    getUint8Memory().set(buf, ptr);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_global_argument_ptr\"]();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction freeMdParser(ptr) {\n\n    _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_mdparser_free\"](ptr);\n}\n/**\n*/\nclass MdParser {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MdParser.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeMdParser(ptr);\n    }\n\n    /**\n    * @returns {}\n    */\n    constructor() {\n        this.ptr = _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_new\"]();\n    }\n    /**\n    * @param {string} arg0\n    * @returns {MdParser}\n    */\n    set_fence_sequence(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return MdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_set_fence_sequence\"](ptr, ptr0, len0));\n    }\n    /**\n    * @param {string} arg0\n    * @returns {MdParser}\n    */\n    set_block_name_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return MdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_set_block_name_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    block_name_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_block_name_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {MdParser}\n    */\n    set_block_name_end(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = isLikeNone(arg0) ? [0, 0] : passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return MdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_set_block_name_end\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    block_name_end() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_block_name_end\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n        if (rustptr === 0) return;\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {boolean} arg0\n    * @returns {MdParser}\n    */\n    set_comments_as_aside(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return MdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_set_comments_as_aside\"](ptr, arg0));\n    }\n    /**\n    * @returns {boolean}\n    */\n    comments_as_aside() {\n        return (_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_comments_as_aside\"](this.ptr)) !== 0;\n    }\n    /**\n    * @param {string} arg0\n    * @returns {MdParser}\n    */\n    set_default_language(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = isLikeNone(arg0) ? [0, 0] : passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return MdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_set_default_language\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    default_language() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_default_language\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n        if (rustptr === 0) return;\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {MdParser}\n    */\n    set_comment_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return MdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_set_comment_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    comment_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_comment_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {MdParser}\n    */\n    set_interpolation_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return MdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_set_interpolation_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    interpolation_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_interpolation_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {MdParser}\n    */\n    set_interpolation_end(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return MdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_set_interpolation_end\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    interpolation_end() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_interpolation_end\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {MdParser}\n    */\n    set_macro_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return MdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_set_macro_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    macro_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_macro_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {MdParser}\n    */\n    set_macro_end(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return MdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_set_macro_end\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    macro_end() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_macro_end\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * Tangles a Markdown document\n    * @param {string} arg0\n    * @param {string} arg1\n    * @param {string} arg2\n    * @returns {string}\n    */\n    tangle(arg0, arg1, arg2) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = isLikeNone(arg1) ? [0, 0] : passStringToWasm(arg1);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = isLikeNone(arg2) ? [0, 0] : passStringToWasm(arg2);\n        const len2 = WASM_VECTOR_LEN;\n        const retptr = globalArgumentPtr();\n        try {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_tangle\"](retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            const mem = getUint32Memory();\n            const rustptr = mem[retptr / 4];\n            const rustlen = mem[retptr / 4 + 1];\n\n            const realRet = getStringFromWasm(rustptr, rustlen).slice();\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n            return realRet;\n\n\n        } finally {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * Weaves a Markdown document\n    * @param {string} arg0\n    * @returns {string}\n    */\n    weave(arg0) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const retptr = globalArgumentPtr();\n        try {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"mdparser_weave\"](retptr, this.ptr, ptr0, len0);\n            const mem = getUint32Memory();\n            const rustptr = mem[retptr / 4];\n            const rustlen = mem[retptr / 4 + 1];\n\n            const realRet = getStringFromWasm(rustptr, rustlen).slice();\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n            return realRet;\n\n\n        } finally {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr0, len0 * 1);\n\n        }\n\n    }\n}\n\nfunction freeHtmlParser(ptr) {\n\n    _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_htmlparser_free\"](ptr);\n}\n/**\n*/\nclass HtmlParser {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HtmlParser.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeHtmlParser(ptr);\n    }\n\n    /**\n    * @returns {}\n    */\n    constructor() {\n        this.ptr = _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_new\"]();\n    }\n    /**\n    * @param {string} arg0\n    * @returns {HtmlParser}\n    */\n    set_code_tag(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_code_tag\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    code_tag() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_code_tag\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {HtmlParser}\n    */\n    set_language_attribute(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_language_attribute\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    language_attribute() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_language_attribute\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {HtmlParser}\n    */\n    set_name_attribute(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_name_attribute\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    name_attribute() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_name_attribute\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {HtmlParser}\n    */\n    set_block_class(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_block_class\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    block_class() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_block_class\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {HtmlParser}\n    */\n    set_language_class(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_language_class\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    language_class() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_language_class\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {boolean} arg0\n    * @returns {HtmlParser}\n    */\n    set_comments_as_aside(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_comments_as_aside\"](ptr, arg0));\n    }\n    /**\n    * @returns {boolean}\n    */\n    comments_as_aside() {\n        return (_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_comments_as_aside\"](this.ptr)) !== 0;\n    }\n    /**\n    * @param {string} arg0\n    * @returns {HtmlParser}\n    */\n    set_default_language(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = isLikeNone(arg0) ? [0, 0] : passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_default_language\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    default_language() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_default_language\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n        if (rustptr === 0) return;\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {HtmlParser}\n    */\n    set_comment_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_comment_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    comment_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_comment_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {HtmlParser}\n    */\n    set_interpolation_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_interpolation_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    interpolation_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_interpolation_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {HtmlParser}\n    */\n    set_interpolation_end(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_interpolation_end\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    interpolation_end() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_interpolation_end\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {HtmlParser}\n    */\n    set_macro_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_macro_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    macro_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_macro_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {HtmlParser}\n    */\n    set_macro_end(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return HtmlParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_set_macro_end\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    macro_end() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_macro_end\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @param {string} arg1\n    * @param {string} arg2\n    * @returns {string}\n    */\n    tangle(arg0, arg1, arg2) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = isLikeNone(arg1) ? [0, 0] : passStringToWasm(arg1);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = isLikeNone(arg2) ? [0, 0] : passStringToWasm(arg2);\n        const len2 = WASM_VECTOR_LEN;\n        const retptr = globalArgumentPtr();\n        try {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_tangle\"](retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            const mem = getUint32Memory();\n            const rustptr = mem[retptr / 4];\n            const rustlen = mem[retptr / 4 + 1];\n\n            const realRet = getStringFromWasm(rustptr, rustlen).slice();\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n            return realRet;\n\n\n        } finally {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {string}\n    */\n    weave(arg0) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const retptr = globalArgumentPtr();\n        try {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"htmlparser_weave\"](retptr, this.ptr, ptr0, len0);\n            const mem = getUint32Memory();\n            const rustptr = mem[retptr / 4];\n            const rustlen = mem[retptr / 4 + 1];\n\n            const realRet = getStringFromWasm(rustptr, rustlen).slice();\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n            return realRet;\n\n\n        } finally {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr0, len0 * 1);\n\n        }\n\n    }\n}\n\nfunction freeBirdParser(ptr) {\n\n    _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_birdparser_free\"](ptr);\n}\n/**\n*/\nclass BirdParser {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BirdParser.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeBirdParser(ptr);\n    }\n\n    /**\n    * @returns {}\n    */\n    constructor() {\n        this.ptr = _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_new\"]();\n    }\n    /**\n    * @param {string} arg0\n    * @returns {BirdParser}\n    */\n    set_code_marker(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return BirdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_set_code_marker\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    code_marker() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_code_marker\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {BirdParser}\n    */\n    set_code_name_marker(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return BirdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_set_code_name_marker\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    code_name_marker() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_code_name_marker\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {BirdParser}\n    */\n    set_comment_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return BirdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_set_comment_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    comment_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_comment_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {BirdParser}\n    */\n    set_interpolation_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return BirdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_set_interpolation_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    interpolation_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_interpolation_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {BirdParser}\n    */\n    set_interpolation_end(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return BirdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_set_interpolation_end\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    interpolation_end() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_interpolation_end\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {BirdParser}\n    */\n    set_macro_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return BirdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_set_macro_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    macro_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_macro_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {BirdParser}\n    */\n    set_macro_end(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return BirdParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_set_macro_end\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    macro_end() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_macro_end\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @param {string} arg1\n    * @param {string} arg2\n    * @returns {string}\n    */\n    tangle(arg0, arg1, arg2) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = isLikeNone(arg1) ? [0, 0] : passStringToWasm(arg1);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = isLikeNone(arg2) ? [0, 0] : passStringToWasm(arg2);\n        const len2 = WASM_VECTOR_LEN;\n        const retptr = globalArgumentPtr();\n        try {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_tangle\"](retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            const mem = getUint32Memory();\n            const rustptr = mem[retptr / 4];\n            const rustlen = mem[retptr / 4 + 1];\n\n            const realRet = getStringFromWasm(rustptr, rustlen).slice();\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n            return realRet;\n\n\n        } finally {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {string}\n    */\n    weave(arg0) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const retptr = globalArgumentPtr();\n        try {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"birdparser_weave\"](retptr, this.ptr, ptr0, len0);\n            const mem = getUint32Memory();\n            const rustptr = mem[retptr / 4];\n            const rustlen = mem[retptr / 4 + 1];\n\n            const realRet = getStringFromWasm(rustptr, rustlen).slice();\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n            return realRet;\n\n\n        } finally {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr0, len0 * 1);\n\n        }\n\n    }\n}\n\nfunction freeTexParser(ptr) {\n\n    _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_texparser_free\"](ptr);\n}\n/**\n*/\nclass TexParser {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TexParser.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeTexParser(ptr);\n    }\n\n    /**\n    * @returns {}\n    */\n    constructor() {\n        this.ptr = _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_new\"]();\n    }\n    /**\n    * @param {string} arg0\n    * @returns {TexParser}\n    */\n    set_code_environment(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return TexParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_set_code_environment\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    code_environment() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_code_environment\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {TexParser}\n    */\n    set_default_language(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = isLikeNone(arg0) ? [0, 0] : passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return TexParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_set_default_language\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    default_language() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_default_language\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n        if (rustptr === 0) return;\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {TexParser}\n    */\n    set_comment_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return TexParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_set_comment_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    comment_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_comment_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {TexParser}\n    */\n    set_interpolation_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return TexParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_set_interpolation_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    interpolation_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_interpolation_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {TexParser}\n    */\n    set_interpolation_end(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return TexParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_set_interpolation_end\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    interpolation_end() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_interpolation_end\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {TexParser}\n    */\n    set_macro_start(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return TexParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_set_macro_start\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    macro_start() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_macro_start\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {TexParser}\n    */\n    set_macro_end(arg0) {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        return TexParser.__wrap(_outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_set_macro_end\"](ptr, ptr0, len0));\n    }\n    /**\n    * @returns {string}\n    */\n    macro_end() {\n        const retptr = globalArgumentPtr();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_macro_end\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {string} arg0\n    * @param {string} arg1\n    * @param {string} arg2\n    * @returns {string}\n    */\n    tangle(arg0, arg1, arg2) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = isLikeNone(arg1) ? [0, 0] : passStringToWasm(arg1);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = isLikeNone(arg2) ? [0, 0] : passStringToWasm(arg2);\n        const len2 = WASM_VECTOR_LEN;\n        const retptr = globalArgumentPtr();\n        try {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_tangle\"](retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            const mem = getUint32Memory();\n            const rustptr = mem[retptr / 4];\n            const rustlen = mem[retptr / 4 + 1];\n\n            const realRet = getStringFromWasm(rustptr, rustlen).slice();\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n            return realRet;\n\n\n        } finally {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * @param {string} arg0\n    * @returns {string}\n    */\n    weave(arg0) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const retptr = globalArgumentPtr();\n        try {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"texparser_weave\"](retptr, this.ptr, ptr0, len0);\n            const mem = getUint32Memory();\n            const rustptr = mem[retptr / 4];\n            const rustlen = mem[retptr / 4 + 1];\n\n            const realRet = getStringFromWasm(rustptr, rustlen).slice();\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n            return realRet;\n\n\n        } finally {\n            _outline_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr0, len0 * 1);\n\n        }\n\n    }\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction __wbindgen_string_new(p, l) {\n    return addHeapObject(getStringFromWasm(p, l));\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction __wbindgen_rethrow(idx) { throw takeObject(idx); }\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! util */ \"util\")[\"TextEncoder\"], __webpack_require__(/*! util */ \"util\")[\"TextDecoder\"]))\n\n//# sourceURL=webpack://@oinkiguana/outline-loader/./node_modules/@oinkiguana/outline/outline.js?");

/***/ }),

/***/ "./node_modules/@oinkiguana/outline/outline_bg.wasm":
/*!**********************************************************!*\
  !*** ./node_modules/@oinkiguana/outline/outline_bg.wasm ***!
  \**********************************************************/
/*! exports provided: memory, __wbg_htmlparser_free, htmlparser_new, htmlparser_set_code_tag, htmlparser_code_tag, htmlparser_set_language_attribute, htmlparser_language_attribute, htmlparser_set_name_attribute, htmlparser_name_attribute, htmlparser_set_block_class, htmlparser_block_class, htmlparser_set_language_class, htmlparser_language_class, htmlparser_set_comments_as_aside, htmlparser_comments_as_aside, htmlparser_set_default_language, htmlparser_default_language, htmlparser_set_comment_start, htmlparser_comment_start, htmlparser_set_interpolation_start, htmlparser_interpolation_start, htmlparser_set_interpolation_end, htmlparser_interpolation_end, htmlparser_set_macro_start, htmlparser_macro_start, htmlparser_set_macro_end, htmlparser_macro_end, htmlparser_tangle, htmlparser_weave, __wbg_mdparser_free, mdparser_new, mdparser_set_fence_sequence, mdparser_set_block_name_start, mdparser_block_name_start, mdparser_set_block_name_end, mdparser_block_name_end, mdparser_set_comments_as_aside, mdparser_comments_as_aside, mdparser_set_default_language, mdparser_default_language, mdparser_set_comment_start, mdparser_comment_start, mdparser_set_interpolation_start, mdparser_interpolation_start, mdparser_set_interpolation_end, mdparser_interpolation_end, mdparser_set_macro_start, mdparser_macro_start, mdparser_set_macro_end, mdparser_macro_end, mdparser_tangle, mdparser_weave, __wbg_birdparser_free, birdparser_new, birdparser_set_code_marker, birdparser_code_marker, birdparser_set_code_name_marker, birdparser_code_name_marker, birdparser_set_comment_start, birdparser_comment_start, birdparser_set_interpolation_start, birdparser_interpolation_start, birdparser_set_interpolation_end, birdparser_interpolation_end, birdparser_set_macro_start, birdparser_macro_start, birdparser_set_macro_end, birdparser_macro_end, birdparser_tangle, birdparser_weave, __wbg_texparser_free, texparser_new, texparser_set_code_environment, texparser_code_environment, texparser_set_default_language, texparser_default_language, texparser_set_comment_start, texparser_comment_start, texparser_set_interpolation_start, texparser_interpolation_start, texparser_set_interpolation_end, texparser_interpolation_end, texparser_set_macro_start, texparser_macro_start, texparser_set_macro_end, texparser_macro_end, texparser_tangle, texparser_weave, __wbindgen_global_argument_ptr, __wbindgen_malloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./outline */ \"./node_modules/@oinkiguana/outline/outline.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack://@oinkiguana/outline-loader/./node_modules/@oinkiguana/outline/outline_bg.wasm?");

/***/ })

};;